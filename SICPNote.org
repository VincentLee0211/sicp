* SICP NOTE

** 前言

*** 一个计算机语言并不仅仅是让计算机去执行操作的一种方式, 更重要的, 它是一种表述有关方法学的思想的新颖的形式化媒介

+ 程序必须写的能够供人们阅读, 偶尔地去供计算机执行
+ 最基本的材料不是特定程序设计语言的语法, 不是有效计算某种功能的巧妙算法, 也不是算法的数学分析或者计算的本质基础, 而是一些能够用于控制大型软件系统的智力复杂度的技术

*** 课程目标
对程序设计的风格要素和审美观有一种很好的感觉

+ 掌控了控制大型系统中复杂性的主要技术
+ 能够去读50页长的程序(只要该程序是以一种值得模仿的形式写出的)
+ 知道在什么时候哪些东西不需要去读, 哪些东西不需要去理解
+ 很有把握地去修改一个程序, 同时又能保持原来作者的精神和风格

*** 控制复杂度
这些技术, 对于所有的工程设计都是通用的

+ 在适当的时候隐藏起一些细节, 通过创建抽象去控制复杂度
+ 建立约定的界面, 以便以一种 "混合与匹配" 的方式组合起一些标准的, 已经很好理解的片段, 去控制复杂度
+ 建立一些新的语言去描述各种设计, 每种语言强调设计中的一个特定方面并降低其他方面的重要性, 以控制复杂性

*** "计算机科学"
"计算机科学" 并不是一种科学, 而且其重要性也与计算机本身并无太大关系

+ 计算机革命是有关如何去思考的方式, 以及如何去表达思考的一个革命
+ 在这个变化中最基本的东西, 就是出现了这样一种最好是称为过程性认识论的现象 -- 就是如何从一种命令式的观点去研究知识的结构

*** 命令式与说明式
+ 说明式, 数学为精确处理"是什么"提供了框架
+ 命令式, 计算为精确处理"怎么做"提供了框架


** 第一章 构造过程抽象

*** 计算过程

+ 定义: 存在于计算机里的一类抽象事物, 在其演化过程中, 这些过程会去操作一些被称为数据的抽象事物
+ 控制: 人们创建出一些成为程序的规则模式, 以指导这类过程的进行
+ 表现: 设计良好的计算系统就像设计良好的汽车或者核反应堆一样, 具有某种模块化的设计, 其中的各个部分都可以独立的构造, 替换, 排除错误

*** 程序设计的基本元素
一个强有力的程序设计语言, 不仅是一种指挥计算机执行任务的方式, 它还应该成为一种框架, 使我们能够在其中组织自己有关计算过程的思想

+ 基本表达式形式, 用于表示语言所关心的最简单的个体
+ 组合的方法, 通过它们可以从较简单的东西出发构造出复合的元素
+ 抽象的方法, 通过它们可以为复合对象命名, 并将它们(名字)当作单元去操作

*** 程序处理要素
程序设计语言都必须能表述基本的数据和基本的过程, 还需要提供对过程和数据进行组合和抽象的方法
数据和过程是统一的, 可以看成一类事物

+ 过程, 有关操作这些数据的规则描述
+ 数据, 希望去操作的"东西"

*** 组合式求值

+ 求值该组合式的各个子表达式
+ 将作为最左子表达式(运算符)的值的那个过程应用于相应的实际参数, 所谓实际参数也就是其它子表达式(运算对象)的值

*** 基本表达式求值
反复应用 "组合式求值" 规则, 总可以将我们带到求值中的某一点, 在这里遇到的不是组合式而是基本表达式

+ 数的值就是它们所表示的数值
+ 内部运算符的值就是能完成相应操作的机器指令序列(第三种规定的特例)
+ 其他名字的值就是在环境中关联于这一名字的那个对象

*** 求值规则
对各种表达式的求值规则可以描述为一个简单的通用规则和一组针对不多的特殊形式的专门规则
各种不同种类的表达式(没种有着与之相关联的求值规则)组成了程序设计语言的语法形式

+ 一般性求值规则
+ 特殊形式(一般性求值规则的例外)

*** 复合过程求值
将复合过程应用于实际参数, 就是在将过程体中的每个形参用相应的实参取代后, 对这一过程体求值

+ 应用序, 首先对运算符和各个运算对象求值, 而后将得到的过程应用于得到的实际参数 (先求值参数, 而后应用)
+ 正则序, 先不对求出运算对象的值, 直到实际需要它们的值时再去做 (完全展开, 而后规约)

*** 谓词

+ 能返回真或假的过程
+ 能求出真或假的表达式

*** 过程抽象
一个过程定义应该能隐藏起一些细节. 使过程的使用者可能不必自己去写这些过程, 而是从其他程序员那里作为一个黑箱而接受它
用户在使用一个过程时, 应该不需要去弄清它是如何实现的

*** 递归计算过程
计算过程由一个推迟执行的运算链条刻画

*** 迭代计算过程
状态可以用固定数目的状态变量描述的计算过程

+ 存在一个固定的规则, 描述了计算过程从一个状态到下一个状态转换时, 这些变量的更新方式
+ 还有一个结束检测, 它描述了计算过程应该终止的条件

*** 计算过程与过程

+ 计算过程, 论述的是这个计算过程的进展方式
+ 过程, 论述的是语法形式上的事实

*** 包含定义过程机制的原因
人们对功能强大的程序设计语言有一个必然要求, 就是能为公共的模式命名, 建立抽象, 而后直接在抽象的层次上工作. 过程提供了这种能力

*** 高阶过程
能操作过程的过程
高阶过程的重要性, 就在于使我们能显示的用程序设计语言的要素去描述这些抽象, 是我们能像操作其他元素一样去操作他们

*** 具有第一级状态的元素
带有最少限制的元素

+ 可以用变量命名
+ 可以提供给过程作为参数
+ 可以由过程作为结果返回
+ 可以包含在数据结构中

** 第二章构造数据抽象

*** 数据抽象
将程序中处理数据对象的表示的部分, 与处理数据对象的使用的部分相互隔离的技术

使我们能将一个复合数据对象的使用, 与该数据对象怎样由更基本的数据对象构造起来的细节隔离开

我们的程序中使用数据的方式应该是这样的, 除了完成当前工作所必要的东西之外, 它们不对所用数据做任何多余的假设
同时, 一种"具体"数据表示的定义, 也应该与程序中使用数据的方式无关

+ 选择函数
+ 构造函数

基本思想: 为每一类数据对象标识出一组操作, 使得对这类数据对象的所有操作都可以基于它们表述, 而且在操作这些数据对象时也只使用它们

*** 抽象屏障
隔离系统中不同的层次

在每一层上, 这种屏障都把使用数据抽象的程序与实现数据抽象的程序分开来

+ 使程序很容易维护和修改
+ 有助于程序的设计, 可以使我们能推迟决策的时间, 而不会阻碍系统其他部分的工作进展
